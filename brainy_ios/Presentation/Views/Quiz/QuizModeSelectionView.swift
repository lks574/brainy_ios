import SwiftUI

/// ÌÄ¥Ï¶à Î™®Îìú ÏÑ†ÌÉù ÌôîÎ©¥
struct QuizModeSelectionView: View {
    @ObservedObject var coordinator: AppCoordinator
    @State private var selectedQuizType: QuizType?
    
    var body: some View {
        VStack(spacing: 32) {
            // Ìó§Îçî
            headerSection
            
            // ÌÄ¥Ï¶à Î™®Îìú ÏÑ†ÌÉù Î≤ÑÌäºÎì§
            quizModeSection
            
            Spacer()
            
            // ÌïòÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäºÎì§
            bottomNavigationSection
        }
        .padding(.horizontal, 24)
        .padding(.vertical, 32)
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.brainyBackground)
        .navigationBarHidden(true)
    }
    
    // MARK: - Header Section
    private var headerSection: some View {
        VStack(spacing: 16) {
            Text("üß†")
                .font(.system(size: 60))
            
            Text("ÌÄ¥Ï¶à Î™®Îìú ÏÑ†ÌÉù")
                .font(.brainyTitle)
                .foregroundColor(.brainyText)
            
            Text("ÏõêÌïòÎäî ÌÄ¥Ï¶à ÌòïÌÉúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî")
                .font(.brainyBody)
                .foregroundColor(.brainyTextSecondary)
                .multilineTextAlignment(.center)
        }
    }
    
    // MARK: - Quiz Mode Section
    private var quizModeSection: some View {
        VStack(spacing: 16) {
            // Ï£ºÍ¥ÄÏãù ÌÄ¥Ï¶à
            QuizModeCard(
                icon: "pencil.and.outline",
                title: "Ï£ºÍ¥ÄÏãù ÌÄ¥Ï¶à",
                description: "ÏßÅÏ†ë ÎãµÏùÑ ÏûÖÎ†•ÌïòÎäî ÌÄ¥Ï¶à",
                quizType: .shortAnswer,
                isSelected: selectedQuizType == .shortAnswer
            ) {
                selectedQuizType = .shortAnswer
                coordinator.navigateToCategorySelection(quizMode: .individual, quizType: .shortAnswer)
            }
            
            // Í∞ùÍ¥ÄÏãù ÌÄ¥Ï¶à
            QuizModeCard(
                icon: "list.bullet.circle",
                title: "Í∞ùÍ¥ÄÏãù ÌÄ¥Ï¶à",
                description: "ÏÑ†ÌÉùÏßÄÏóêÏÑú ÎãµÏùÑ Í≥†Î•¥Îäî ÌÄ¥Ï¶à",
                quizType: .multipleChoice,
                isSelected: selectedQuizType == .multipleChoice
            ) {
                selectedQuizType = .multipleChoice
                coordinator.navigateToCategorySelection(quizMode: .individual, quizType: .multipleChoice)
            }
            
            // ÏùåÏÑ±Î™®Îìú ÌÄ¥Ï¶à (ÎØ∏Íµ¨ÌòÑ)
            QuizModeCard(
                icon: "mic.circle",
                title: "ÏùåÏÑ±Î™®Îìú ÌÄ¥Ï¶à",
                description: "ÏùåÏÑ±ÏúºÎ°ú Îì£Í≥† ÎãµÌïòÎäî ÌÄ¥Ï¶à",
                quizType: .voice,
                isEnabled: false,
                isSelected: selectedQuizType == .voice
            ) {
                // TODO: ÏùåÏÑ±Î™®Îìú Íµ¨ÌòÑ ÌõÑ ÌôúÏÑ±Ìôî
                selectedQuizType = .voice
            }
            
            // AI Î™®Îìú ÌÄ¥Ï¶à (ÎØ∏Íµ¨ÌòÑ)
            QuizModeCard(
                icon: "brain.head.profile",
                title: "AI Î™®Îìú ÌÄ¥Ï¶à",
                description: "AIÍ∞Ä ÏÉùÏÑ±ÌïòÎäî ÎèôÏ†Å ÌÄ¥Ï¶à",
                quizType: .ai,
                isEnabled: false,
                isSelected: selectedQuizType == .ai
            ) {
                // TODO: AI Î™®Îìú Íµ¨ÌòÑ ÌõÑ ÌôúÏÑ±Ìôî
                selectedQuizType = .ai
            }
        }
    }
    
    // MARK: - Bottom Navigation Section
    private var bottomNavigationSection: some View {
        HStack(spacing: 16) {
            // ÌûàÏä§ÌÜ†Î¶¨ Î≤ÑÌäº
            Button(action: {
                coordinator.navigateToHistory()
            }) {
                HStack {
                    Image(systemName: "clock.arrow.circlepath")
                    Text("ÌûàÏä§ÌÜ†Î¶¨")
                }
                .font(.brainyButton)
                .foregroundColor(.brainyPrimary)
                .frame(maxWidth: .infinity)
                .frame(height: 44)
                .background(Color.brainySurface)
                .cornerRadius(12)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.brainyPrimary, lineWidth: 1)
                )
            }
            
            // ÌîÑÎ°úÌïÑ Î≤ÑÌäº
            Button(action: {
                coordinator.navigateToProfile()
            }) {
                HStack {
                    Image(systemName: "person.circle")
                    Text("ÌîÑÎ°úÌïÑ")
                }
                .font(.brainyButton)
                .foregroundColor(.brainyPrimary)
                .frame(maxWidth: .infinity)
                .frame(height: 44)
                .background(Color.brainySurface)
                .cornerRadius(12)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.brainyPrimary, lineWidth: 1)
                )
            }
        }
    }
}

// MARK: - Quiz Mode Card
private struct QuizModeCard: View {
    let icon: String
    let title: String
    let description: String
    let quizType: QuizType
    let isEnabled: Bool
    let isSelected: Bool
    let action: () -> Void
    
    init(
        icon: String,
        title: String,
        description: String,
        quizType: QuizType,
        isEnabled: Bool = true,
        isSelected: Bool = false,
        action: @escaping () -> Void
    ) {
        self.icon = icon
        self.title = title
        self.description = description
        self.quizType = quizType
        self.isEnabled = isEnabled
        self.isSelected = isSelected
        self.action = action
    }
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: 16) {
                // ÏïÑÏù¥ÏΩò
                Image(systemName: icon)
                    .font(.system(size: 24, weight: .medium))
                    .foregroundColor(iconColor)
                    .frame(width: 48, height: 48)
                    .background(
                        Circle()
                            .fill(iconBackgroundColor)
                    )
                
                // ÌÖçÏä§Ìä∏
                VStack(alignment: .leading, spacing: 6) {
                    Text(title)
                        .font(.brainyHeadlineMedium)
                        .foregroundColor(titleColor)
                        .multilineTextAlignment(.leading)
                    
                    Text(description)
                        .font(.brainyBodyMedium)
                        .foregroundColor(.brainyTextSecondary)
                        .multilineTextAlignment(.leading)
                }
                
                Spacer()
                
                // ÏÉÅÌÉú ÌëúÏãú
                statusIndicator
            }
            .padding(20)
            .background(cardBackgroundColor)
            .cornerRadius(16)
            .overlay(
                RoundedRectangle(cornerRadius: 16)
                    .stroke(borderColor, lineWidth: borderWidth)
            )
            .scaleEffect(isSelected ? 1.02 : 1.0)
            .animation(.easeInOut(duration: 0.2), value: isSelected)
        }
        .disabled(!isEnabled)
        .buttonStyle(PlainButtonStyle())
    }
    
    // MARK: - Computed Properties
    
    private var iconColor: Color {
        if !isEnabled {
            return .brainyTextSecondary
        }
        return isSelected ? .white : .brainyPrimary
    }
    
    private var iconBackgroundColor: Color {
        if !isEnabled {
            return Color.brainyTextSecondary.opacity(0.1)
        }
        return isSelected ? .brainyPrimary : Color.brainyPrimary.opacity(0.1)
    }
    
    private var titleColor: Color {
        if !isEnabled {
            return .brainyTextSecondary
        }
        return isSelected ? .brainyPrimary : .brainyText
    }
    
    private var cardBackgroundColor: Color {
        if isSelected {
            return Color.brainyPrimary.opacity(0.05)
        }
        return .brainyCardBackground
    }
    
    private var borderColor: Color {
        if !isEnabled {
            return Color.brainySecondary.opacity(0.2)
        }
        return isSelected ? .brainyPrimary : Color.brainySecondary.opacity(0.2)
    }
    
    private var borderWidth: CGFloat {
        return isSelected ? 2.0 : 1.0
    }
    
    @ViewBuilder
    private var statusIndicator: some View {
        if !isEnabled {
            Text("Ï§ÄÎπÑÏ§ë")
                .font(.brainyLabelSmall)
                .foregroundColor(.brainyTextSecondary)
                .padding(.horizontal, 8)
                .padding(.vertical, 4)
                .background(Color.brainyTextSecondary.opacity(0.1))
                .cornerRadius(8)
        } else if isSelected {
            Image(systemName: "checkmark.circle.fill")
                .font(.system(size: 20, weight: .medium))
                .foregroundColor(.brainyPrimary)
        } else {
            Image(systemName: "chevron.right")
                .font(.system(size: 14, weight: .medium))
                .foregroundColor(.brainyTextSecondary)
        }
    }
}

